v:	DF	1.0, 2.0, -3.0, 5.0, 4.0, 6.0, 3.0, 4.0, -3.0
len:	EQU	9

	addi	t0, t0, len		;; t0 holds vector length
	addi	t1, t1, 1		;; t1 holds const value 1
	addi	s0, s0, 0		;; s0 holds vector index
	fld	f2, v(s0)		;; loading first vector into f2
	
	jal	ra, recMax		
	ebreak	x0, x0, 0

recMax:	blt	t1, t0, recu		;; if (len > 1) do recursive call
	jalr	x0, 0(ra)		;; else return

recu:	addi	sp, sp, -16		;; adjusting stack pointer
	sd	ra, -8(sp)		;; storing ra
	fsd	f2, -16(sp)		;; storing vector elements in stack

	addi	s0, s0, 8		;; incrementing vector index
	addi	t0, t0, -1		;; decrementing vector length

	fld	f2, v(s0)		;; loading next vector element since s0+8

	jal	ra, recMax		;; recursive call

	fld	f3, -16(sp)		;; after storing all elements, load in f3
	ld	ra, -8(sp)		
	addi	sp, sp, 16		

	fmax.d	f2, f3, f2		;; find max of f3 and f2 where f2 is the element before f3
	fmv.x.d	x30, f2		
	ecall	x0, x30, 1		;; ecall max of two elements

	jalr	x0, 0(ra)		;; keep on finding max of two elements going right to left
				;; and when finish calls, return the max element
	